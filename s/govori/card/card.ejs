<!DOCTYPE html> <!-- removeme -->
<html> <!-- removeme -->

<head> <!-- removeme -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge" /> <!-- removeme -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"> <!-- removeme -->

    <!-- build:remove -->
    <!-- these script files are removed on build -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script src="https://cdn.parlameter.si/v1/parlassets/js/perfect-scrollbar.js"></script>
    <script src="https://cdn.parlameter.si/v1/parlassets/js/perfect-scrollbar.jquery.js"></script>
    <script src="https://d3js.org/d3.v3.min.js"></script>
    <script src="https://cdn.parlameter.si/v1/parlassets/js/script.js"></script>
    <!-- endbuild -->
    <script>
      var speechdata = <%- JSON.stringify(data); %>;
    </script>

    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css" rel="stylesheet" data-remove="false" data-concat="false"> <!-- removeme -->
    <link rel="stylesheet" href="https://cdn.parlameter.si/v1/parlassets/css/perfect-scrollbar.css" data-remove="false" data-concat="false"> <!-- removeme -->
    <link rel="stylesheet" href="https://cdn.parlameter.si/v1/parlassets/scss/style.css" data-remove="false" data-concat="false"> <!-- removeme -->

    <!-- your css file is compiled to this and later inlined (must begin with data2-inline="true" )-->
    <link data-inline="true" rel="stylesheet" href="css/style.css">

</head> <!-- removeme -->

<body> <!-- removeme -->


    <!-- everything above here is part of the page and not part of the card -->
    <%

      function makeId() {
          var text = "";
          var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

          for(var i = 0; i < 5; i++) {
              text += possible.charAt(Math.floor(Math.random() * possible.length));
          }

          return text;
      }

      function compare(a, b) {
        if (a.results.speech_id < b.results.speech_id) {
          return -1;
        }

        if (a.results.speech_id > b.results.speech_id) {
          return 1;
        }
        return 0;
      }

      var newdata = data.results.sort(compare);

      for (i = 0; i < data.results.length; i++) {
        var data2 = newdata[i];

        var randomId2 = makeId();
      %>
      <div class="justaspeechcontainer">
        <div class="card-container card-halfling <%= className %>" id="<%= randomId2 %>" data-randomid="<%= randomId2 %>">
            <input type="hidden" class="mywords" id="<%= randomId2 %>words" value="<%= data2.results.content.replace(/\n+/g, '').trim() %>">
            <input type="hidden" class="myid" id="<%= randomId2 %>id" value="<%= data2.results.speech_id %>">
            <div class="card-header card-header-person">
                <div class="portrait" style="background-image: url('https://cdn.parlameter.si/v1/parlassets/img/people/square/<%- data2.person.gov_id ? data2.person.gov_id : 'null' %>.png')"></div>
                <h1 class="name"><%= data2.person.name %></h1>
            </div>
            <div class="card-content <% if (data2.results.quoted_text) { %>just-quote<% } %> closed">
              <div class="everything">
                <div class="speech-text">
                  <%= data2.results.content.replace(/\n+/g, '').trim() %>
                  <div class="quote-button">“</div>
                </div>

                <div class="similar-speech">
                  <div class="similar-speech-content tab-content"></div>

                  <div class="similar-speech-tabs">
                    <h2 class="title">Podobni govori:</h2>
                    <ul></ul>
                  </div>
                </div>

                <div class="toggle-arrow"></div>
              </div>

              <div class="quote">
                <div class="speech-text">
                  <%
                    if (data2.results.quoted_text) {
                      var PADDING_LENGTH = 30;
                      var splitQuote = data2.results.content.replace(/\n+/g, '').trim().split(data2.results.quoted_text);

                      var paddingBefore = splitQuote[0].slice(-PADDING_LENGTH);
                      var paddingAfter = splitQuote[1].slice(0, PADDING_LENGTH);

                      var quoteWithPadding = '...' + paddingBefore + '<span>' + data2.results.quoted_text + '</span>' + paddingAfter + '...';
                  %>
                  <%- quoteWithPadding %>
                  <% }%>
                  <div class="quote-button inactive">“</div>
                </div>
                <a href="#" class="full-text-link">Cel govor</a>
              </div>
            </div>
            <div class="card-footer">
                <div class="card-circle-button card-share"></div>
                <div class="card-circle-button card-embed"></div>
                <div class="card-circle-button card-info">i</div>
            </div>
        </div>
      </div>
      <% } %>
    <!-- everything below here is part of the page and not part of the card -->

    <!-- your js file is compiled to this and later inlined (must begin with data-inline="true" )-->
    <!-- inline temp/js/script.js as <script> -->
    <script data-inline="true" src="js/script.js"></script>

     <script>

/* ========================================================================
 * Bootstrap: tab.js v3.3.6
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    // jscs:disable requireDollarBeforejQueryAssignment
    this.element = $(element)
    // jscs:enable requireDollarBeforejQueryAssignment
  }

  Tab.VERSION = '3.3.6'

  Tab.TRANSITION_DURATION = 150

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.results('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var $previous = $ul.find('.active:last a')
    var hideEvent = $.Event('hide.bs.tab', {
      relatedTarget: $this[0]
    })
    var showEvent = $.Event('show.bs.tab', {
      relatedTarget: $previous[0]
    })

    $previous.trigger(hideEvent)
    $this.trigger(showEvent)

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.closest('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      })
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
          .removeClass('active')
        .end()
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', false)

      element
        .addClass('active')
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', true)

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu').length) {
        element
          .closest('li.dropdown')
            .addClass('active')
          .end()
          .find('[data-toggle="tab"]')
            .attr('aria-expanded', true)
      }

      callback && callback()
    }

    $active.length && transition ?
      $active
        .one('bsTransitionEnd', next)
        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.results('bs.tab')

      if (!data) $this.results('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tab

  $.fn.tab             = Plugin
  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  var clickHandler = function (e) {
    e.preventDefault()
    Plugin.call($(this), 'show')
  }

  $(document)
    .on('click.bs.tab.results-api', '[data-toggle="tab"]', clickHandler)
    .on('click.bs.tab.results-api', '[data-toggle="pill"]', clickHandler)

}(jQuery);

    </script>

</body> <!-- removeme -->

</html> <!-- removeme -->
